import pandas as pd
import polars as pl

import warnings

warnings.filterwarnings('ignore')


class FraudDetectionEDA:
    def __init__(self, transaction_file, currency_file):
        self.transaction_file = transaction_file
        self.currency_file = currency_file
        self.df_transactions = None
        self.df_currency = None
        self.load_data()

    def load_data(self):
        print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")

        self.df_transactions = pl.read_parquet(self.transaction_file)
        print(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {self.df_transactions.shape[0]} —Å—Ç—Ä–æ–∫, {self.df_transactions.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")

        self.df_currency = pl.read_parquet(self.currency_file)
        print(f"–í–∞–ª—é—Ç–Ω—ã–µ –∫—É—Ä—Å—ã: {self.df_currency.shape[0]} —Å—Ç—Ä–æ–∫, {self.df_currency.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")

        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

    def basic_info(self):
        print("\n" + "=" * 60)
        print("üìã –ë–ê–ó–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–ê–ù–ù–´–•")
        print("=" * 60)

        print("\nüè¶ –î–ê–ù–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:")
        print(f"–†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞: {self.df_transactions.shape}")
        print(f"–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {self.df_transactions['timestamp'].min()} - {self.df_transactions['timestamp'].max()}")

        null_counts = self.df_transactions.null_count()
        print("\nüîç –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
        for col in null_counts.columns:
            null_val = null_counts[col][0]
            if null_val > 0:
                print(f"  {col}: {null_val} ({null_val / len(self.df_transactions) * 100:.2f}%)")

        fraud_stats = self.df_transactions.group_by('is_fraud').agg([
            pl.count().alias('count'),
            pl.col('amount').mean().alias('avg_amount'),
            pl.col('amount').sum().alias('total_amount')
        ])
        print(f"\nüö® –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞:")
        print(fraud_stats.to_pandas())

        print(f"\nüí± –í–ê–õ–Æ–¢–ù–´–ï –ö–£–†–°–´:")
        print(f"–ü–µ—Ä–∏–æ–¥: {self.df_currency['date'].min()} - {self.df_currency['date'].max()}")
        print(f"–í–∞–ª—é—Ç—ã: {[col for col in self.df_currency.columns if col != 'date']}")

    def fraud_overview(self):
        """–û–±–∑–æ—Ä –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        print("\n" + "=" * 60)
        print("üö® –ê–ù–ê–õ–ò–ó –ú–û–®–ï–ù–ù–ò–ß–ï–°–¢–í–ê")
        print("=" * 60)

        df_pd = self.df_transactions.to_pandas()

        total_transactions = len(df_pd)
        fraud_transactions = df_pd['is_fraud'].sum()
        fraud_rate = fraud_transactions / total_transactions * 100

        print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_transactions:,}")
        print(f"  –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {fraud_transactions:,}")
        print(f"  –£—Ä–æ–≤–µ–Ω—å –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞: {fraud_rate:.2f}%")

        fraud_amount = df_pd[df_pd['is_fraud']]['amount'].sum()
        total_amount = df_pd['amount'].sum()
        fraud_loss_rate = fraud_amount / total_amount * 100

        print(f"\nüí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ—Ç–µ—Ä–∏:")
        print(f"  –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: ${total_amount:,.2f}")
        print(f"  –ü–æ—Ç–µ—Ä–∏ –æ—Ç –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞: ${fraud_amount:,.2f}")
        print(f"  –î–æ–ª—è –ø–æ—Ç–µ—Ä—å: {fraud_loss_rate:.2f}%")

        avg_legit = df_pd[~df_pd['is_fraud']]['amount'].mean()
        avg_fraud = df_pd[df_pd['is_fraud']]['amount'].mean()

        print(f"\nüí≥ –°—Ä–µ–¥–Ω–∏–µ —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:")
        print(f"  –õ–µ–≥–∏—Ç–∏–º–Ω—ã–µ: ${avg_legit:,.2f}")
        print(f"  –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏–µ: ${avg_fraud:,.2f}")
        print(f"  –†–∞–∑–Ω–∏—Ü–∞: {((avg_fraud / avg_legit - 1) * 100):+.1f}%")

    def analyze_by_dimensions(self):
        print("\n" + "=" * 60)
        print("üîç –ê–ù–ê–õ–ò–ó –ü–û –ò–ó–ú–ï–†–ï–ù–ò–Ø–ú")
        print("=" * 60)

        df_pd = self.df_transactions.to_pandas()

        print("\nüè™ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤–µ–Ω–¥–æ—Ä–æ–≤:")
        vendor_analysis = df_pd.groupby('vendor_category').agg({
            'is_fraud': ['count', 'sum', 'mean'],
            'amount': ['sum', 'mean']
        }).round(4)
        vendor_analysis.columns = ['total_trans', 'fraud_trans', 'fraud_rate', 'total_amount', 'avg_amount']
        vendor_analysis['fraud_rate_pct'] = vendor_analysis['fraud_rate'] * 100
        print(vendor_analysis.sort_values('fraud_rate', ascending=False))

        print("\nüí≥ –ü–æ —Ç–∏–ø–∞–º –∫–∞—Ä—Ç:")
        card_analysis = df_pd.groupby('card_type').agg({
            'is_fraud': ['count', 'sum', 'mean'],
            'amount': ['mean']
        }).round(4)
        card_analysis.columns = ['total_trans', 'fraud_trans', 'fraud_rate', 'avg_amount']
        card_analysis['fraud_rate_pct'] = card_analysis['fraud_rate'] * 100
        print(card_analysis.sort_values('fraud_rate', ascending=False))

        print("\nüì± –ü–æ –∫–∞–Ω–∞–ª–∞–º:")
        channel_analysis = df_pd.groupby('channel').agg({
            'is_fraud': ['count', 'sum', 'mean'],
            'amount': ['mean']
        }).round(4)
        channel_analysis.columns = ['total_trans', 'fraud_trans', 'fraud_rate', 'avg_amount']
        channel_analysis['fraud_rate_pct'] = channel_analysis['fraud_rate'] * 100
        print(channel_analysis.sort_values('fraud_rate', ascending=False))

        print("\nüåç –¢–æ–ø-10 —Å—Ç—Ä–∞–Ω –ø–æ —É—Ä–æ–≤–Ω—é –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞:")
        country_analysis = df_pd.groupby('country').agg({
            'is_fraud': ['count', 'sum', 'mean']
        }).round(4)
        country_analysis.columns = ['total_trans', 'fraud_trans', 'fraud_rate']
        country_analysis = country_analysis[country_analysis['total_trans'] >= 100]  # –ú–∏–Ω–∏–º—É–º 100 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        top_fraud_countries = country_analysis.sort_values('fraud_rate', ascending=False).head(10)
        top_fraud_countries['fraud_rate_pct'] = top_fraud_countries['fraud_rate'] * 100
        print(top_fraud_countries)

    def temporal_analysis(self):
        print("\n" + "=" * 60)
        print("‚è∞ –í–†–ï–ú–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–ó")
        print("=" * 60)

        df_pd = self.df_transactions.to_pandas()
        df_pd['timestamp'] = pd.to_datetime(df_pd['timestamp'])
        df_pd['hour'] = df_pd['timestamp'].dt.hour
        df_pd['day_of_week'] = df_pd['timestamp'].dt.day_name()
        df_pd['date'] = df_pd['timestamp'].dt.date

        print("\nüïê –ü–æ —á–∞—Å–∞–º –¥–Ω—è:")
        hourly_analysis = df_pd.groupby('hour').agg({
            'is_fraud': ['count', 'sum', 'mean']
        }).round(4)
        hourly_analysis.columns = ['total_trans', 'fraud_trans', 'fraud_rate']
        hourly_analysis['fraud_rate_pct'] = hourly_analysis['fraud_rate'] * 100

        dangerous_hours = hourly_analysis.sort_values('fraud_rate', ascending=False).head(5)
        print("–¢–æ–ø-5 —Å–∞–º—ã—Ö –æ–ø–∞—Å–Ω—ã—Ö —á–∞—Å–æ–≤:")
        print(dangerous_hours)

        print("\nüìÖ –í—ã—Ö–æ–¥–Ω—ã–µ vs –±—É–¥–Ω–∏:")
        weekend_analysis = df_pd.groupby('is_weekend').agg({
            'is_fraud': ['count', 'sum', 'mean']
        }).round(4)
        weekend_analysis.columns = ['total_trans', 'fraud_trans', 'fraud_rate']
        weekend_analysis['fraud_rate_pct'] = weekend_analysis['fraud_rate'] * 100
        weekend_analysis.index = ['–ë—É–¥–Ω–∏', '–í—ã—Ö–æ–¥–Ω—ã–µ']
        print(weekend_analysis)

    def risk_factors_analysis(self):
        print("\n" + "=" * 60)
        print("‚ö†Ô∏è –ê–ù–ê–õ–ò–ó –§–ê–ö–¢–û–†–û–í –†–ò–°–ö–ê")
        print("=" * 60)

        df_pd = self.df_transactions.to_pandas()

        risk_factors = ['is_high_risk_vendor', 'is_outside_home_country', 'is_card_present']

        for factor in risk_factors:
            print(f"\nüéØ –§–∞–∫—Ç–æ—Ä: {factor}")
            factor_analysis = df_pd.groupby(factor).agg({
                'is_fraud': ['count', 'sum', 'mean']
            }).round(4)
            factor_analysis.columns = ['total_trans', 'fraud_trans', 'fraud_rate']
            factor_analysis['fraud_rate_pct'] = factor_analysis['fraud_rate'] * 100
            print(factor_analysis)

        print("\n‚ö° –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:")

        df_pd['last_hour_num_trans'] = df_pd['last_hour_activity'].apply(
            lambda x: x.get('num_transactions', 0) if x else 0)
        df_pd['last_hour_total_amount'] = df_pd['last_hour_activity'].apply(
            lambda x: x.get('total_amount', 0) if x else 0)
        df_pd['last_hour_unique_merchants'] = df_pd['last_hour_activity'].apply(
            lambda x: x.get('unique_merchants', 0) if x else 0)

        activity_corr = \
        df_pd[['is_fraud', 'last_hour_num_trans', 'last_hour_total_amount', 'last_hour_unique_merchants']].corr()[
            'is_fraud'].sort_values(ascending=False)
        print("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ–º:")
        print(activity_corr)

    def currency_analysis(self):
        """–ê–Ω–∞–ª–∏–∑ –ø–æ –≤–∞–ª—é—Ç–∞–º"""
        print("\n" + "=" * 60)
        print("üí± –ê–ù–ê–õ–ò–ó –ü–û –í–ê–õ–Æ–¢–ê–ú")
        print("=" * 60)

        df_pd = self.df_transactions.to_pandas()

        # –ê–Ω–∞–ª–∏–∑ –ø–æ –≤–∞–ª—é—Ç–∞–º
        currency_analysis = df_pd.groupby('currency').agg({
            'is_fraud': ['count', 'sum', 'mean'],
            'amount': ['sum', 'mean']
        }).round(4)
        currency_analysis.columns = ['total_trans', 'fraud_trans', 'fraud_rate', 'total_amount', 'avg_amount']
        currency_analysis['fraud_rate_pct'] = currency_analysis['fraud_rate'] * 100
        currency_analysis = currency_analysis.sort_values('fraud_rate', ascending=False)

        print("–ê–Ω–∞–ª–∏–∑ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –ø–æ –≤–∞–ª—é—Ç–∞–º:")
        print(currency_analysis)

    def device_fingerprint_analysis(self):
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        print("\n" + "=" * 60)
        print("üì± –ê–ù–ê–õ–ò–ó –£–°–¢–†–û–ô–°–¢–í")
        print("=" * 60)

        df_pd = self.df_transactions.to_pandas()

        # –ê–Ω–∞–ª–∏–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        device_analysis = df_pd.groupby('device').agg({
            'is_fraud': ['count', 'sum', 'mean']
        }).round(4)
        device_analysis.columns = ['total_trans', 'fraud_trans', 'fraud_rate']
        device_analysis['fraud_rate_pct'] = device_analysis['fraud_rate'] * 100
        device_analysis = device_analysis[device_analysis['total_trans'] >= 50]  # –ú–∏–Ω–∏–º—É–º 50 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

        print("–¢–æ–ø-10 —Å–∞–º—ã—Ö —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:")
        print(device_analysis.sort_values('fraud_rate', ascending=False).head(10))

        # –ê–Ω–∞–ª–∏–∑ –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        fingerprint_analysis = df_pd.groupby('device_fingerprint').agg({
            'is_fraud': ['count', 'sum', 'mean'],
            'customer_id': 'nunique'
        }).round(4)
        fingerprint_analysis.columns = ['total_trans', 'fraud_trans', 'fraud_rate', 'unique_customers']

        # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–ø–µ—á–∞—Ç–∫–∏ (–≤—ã—Å–æ–∫–∏–π fraud rate –∏–ª–∏ –º–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ)
        suspicious_fingerprints = fingerprint_analysis[
            (fingerprint_analysis['fraud_rate'] > 0.5) |  # –ë–æ–ª–µ–µ 50% –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞
            (fingerprint_analysis['unique_customers'] > 10)  # –ë–æ–ª–µ–µ 10 –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
            ].sort_values('fraud_rate', ascending=False)

        print(f"\nüö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–ø–µ—á–∞—Ç–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(suspicious_fingerprints)}")
        if len(suspicious_fingerprints) > 0:
            print("–¢–æ–ø-5 —Å–∞–º—ã—Ö –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö:")
            print(suspicious_fingerprints.head())

    def generate_hypotheses(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–∏–ø–æ—Ç–µ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        print("\n" + "=" * 80)
        print("üí° –ü–†–û–î–£–ö–¢–û–í–´–ï –ò –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ì–ò–ü–û–¢–ï–ó–´")
        print("=" * 80)

        # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ—Ç–µ—Ä–∏ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –≥–∏–ø–æ—Ç–µ–∑—ã
        df_pd = self.df_transactions.to_pandas()
        fraud_amount_billions = df_pd[df_pd['is_fraud']]['amount'].sum() / 1e9  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–∏–ª–ª–∏–∞—Ä–¥—ã

        print(f"""
üè¢ –ü–†–û–î–£–ö–¢–û–í–´–ï –ì–ò–ü–û–¢–ï–ó–´:

1. –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ï –¶–ï–ù–û–û–ë–†–ê–ó–û–í–ê–ù–ò–ï –°–¢–†–ê–•–û–í–ö–ò –û–¢ –ú–û–®–ï–ù–ù–ò–ß–ï–°–¢–í–ê
   ‚Ä¢ –í–∑–∏–º–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é –∑–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   ‚Ä¢ –í—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è) = –≤—ã—à–µ –∫–æ–º–∏—Å—Å–∏—è
   ‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥: 0.1-0.5% –æ—Ç –æ–±–æ—Ä–æ—Ç–∞ –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

2. –°–ò–°–¢–ï–ú–ê –í–†–ï–ú–ï–ù–ù–´–• –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô
   ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –Ω–æ—á–Ω—ã–µ —á–∞—Å—ã –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç/—É—Å—Ç—Ä–æ–π—Å—Ç–≤
   ‚Ä¢ –¢—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞
   ‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –Ω–∞ 15-25%

3. –ü–†–ï–ú–ò–£–ú –¢–ê–†–ò–§–´ –î–õ–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
   ‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∑–∞—â–∏—Ç—É –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–ª–∞—Ç—É
   ‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –±–∏–æ–º–µ—Ç—Ä–∏—è, —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤
   ‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –º–∞—Ä–∂–∞: $5-15/–º–µ—Å—è—Ü —Å –ø—Ä–µ–º–∏—É–º –∫–ª–∏–µ–Ω—Ç–æ–≤

4. –ì–ï–û–õ–û–ö–ê–¶–ò–û–ù–ù–´–ï –ü–†–û–î–£–ö–¢–´
   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç –ø—Ä–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è—Ö
   ‚Ä¢ –£—Å–ª—É–≥–∞ "Travel Mode" –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–µ–∑–¥–∫–∞—Ö
   ‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ false positives –Ω–∞ 20-30%

üîß –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ì–ò–ü–û–¢–ï–ó–´:

1. –ê–ù–°–ê–ú–ë–õ–ï–í–ê–Ø –ú–û–î–ï–õ–¨ –†–ï–ê–õ–¨–ù–û–ì–û –í–†–ï–ú–ï–ù–ò
   ‚Ä¢ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: XGBoost + Neural Network + –ü—Ä–∞–≤–∏–ª–∞
   ‚Ä¢ –§–∏—á–∏: device fingerprinting, behavioral patterns, network analysis
   ‚Ä¢ –û–∂–∏–¥–∞–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: 95%+ —Å 2%- false positive rate

2. –°–ò–°–¢–ï–ú–ê –°–ö–û–†–ò–ù–ì–ê –£–°–¢–†–û–ô–°–¢–í
   ‚Ä¢ –ü—Ä–∏—Å–≤–∞–∏–≤–∞—Ç—å trust score –∫–∞–∂–¥–æ–º—É device fingerprint
   ‚Ä¢ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   ‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏

3. –ì–†–ê–§ –ê–ù–ê–õ–ò–ó –°–ï–¢–ï–ô
   ‚Ä¢ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–æ–≤ —Å–≤—è–∑–µ–π: IP ‚Üí Device ‚Üí Customer ‚Üí Merchant
   ‚Ä¢ –í—ã—è–≤–ª–µ–Ω–∏–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –∏ organized fraud
   ‚Ä¢ Community detection –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è fraud rings

4. REAL-TIME FEATURE ENGINEERING
   ‚Ä¢ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ñ–∏—á–∏: velocity checks, amount patterns, location jumps
   ‚Ä¢ Streaming –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å Apache Kafka + Apache Flink
   ‚Ä¢ –õ–∞—Ç–µ–Ω—Å–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è < 100ms

5. ANOMALY DETECTION –î–õ–Ø –ù–û–í–´–• –í–ò–î–û–í –ú–û–®–ï–ù–ù–ò–ß–ï–°–¢–í–ê
   ‚Ä¢ Unsupervised learning –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–æ–º–∞–ª–∏–π
   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è fraud analysts

üìä –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –¶–ï–ù–ù–û–°–¢–¨ –î–õ–Ø –ë–ò–ó–ù–ï–°–ê:

1. –°–ù–ò–ñ–ï–ù–ò–ï –ü–û–¢–ï–†–¨: —Ç–µ–∫—É—â–∏–µ –ø–æ—Ç–µ—Ä–∏ ~${fraud_amount_billions:.1f} –º–ª—Ä–¥/–≥–æ–¥ ‚Üí —Ü–µ–ª—å —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞ 40-60%
2. –£–í–ï–õ–ò–ß–ï–ù–ò–ï –î–û–•–û–î–û–í: –Ω–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ‚Üí +5-10% revenue
3. –ü–û–í–´–®–ï–ù–ò–ï TRUST: —Å–Ω–∏–∂–µ–Ω–∏–µ false positives ‚Üí —É–ª—É—á—à–µ–Ω–∏–µ UX
4. OPERATIONAL EFFICIENCY: –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è ‚Üí —Å–Ω–∏–∂–µ–Ω–∏–µ manual review –Ω–∞ 70%
5. COMPLIANCE: —É–ª—É—á—à–µ–Ω–Ω—ã–π risk management ‚Üí —Å–Ω–∏–∂–µ–Ω–∏–µ regulatory costs
        """)

    def run_full_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –†–ê–ó–í–ï–î–û–ß–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –î–ê–ù–ù–´–•")
        print("=" * 80)

        self.basic_info()
        self.fraud_overview()
        self.analyze_by_dimensions()
        self.temporal_analysis()
        self.risk_factors_analysis()
        self.currency_analysis()
        self.device_fingerprint_analysis()
        self.generate_hypotheses()

        print("\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        print("üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –≤–∏–¥–µ –≥–∏–ø–æ—Ç–µ–∑ –≤—ã—à–µ")


if __name__ == "__main__":
    eda = FraudDetectionEDA(
        transaction_file="transaction_fraud_data.parquet",
        currency_file="historical_currency_exchange.parquet"
    )

    eda.run_full_analysis()
